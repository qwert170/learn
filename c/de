#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<sys/wait.h>
#include<sys/stat.h>
#include<sys/types.h>
#include<dirent.h>
#include<fcntl.h>

#define normal 0
#define out_redirect 1 //>
#define in_redirect 2 //<
#define have_pipe 3  //|
#define aout_redirect 4  //>>

void print_prompt();
void get_input(char *);
void explain_input(char *,int *,char arglist[][256]);
void do_cmd(int,char a[][256]);
int find_command(char *);

int main()
{
    int i;
    int argcount=0;
    char arglist[100][256];
    char **arg=NULL;
    char *buf=NULL;

    buf=(char *)malloc(256);
    if(buf==NULL)
    {
        perror("malloc failed");
        exit(-1);
    }

    while(1)
    {
        memset(buf,0,256);
        print_prompt();
        get_input(buf);
        if(strcmp(buf,"exit\n")==0||strcmp(buf,"logout\n")==0)
            break;
        for(i=0;i<100;i++)
        {
            arglist[i][0]='\0';
        }
        argcount=0;
        explain_input(buf,&argcount,arglist);
        do_cmd(argcount,arglist);
    }

    if(buf!=NULL)
    {
        free(buf);
        buf=NULL;
    }

    exit(0);
}

void print_prompt()
{
    printf("myshell$$ ");
}

void get_input(char *buf)
{
    int len=0;
    int ch;

    ch=getchar();
    while(len<256&&ch!='\n')
    {
        buf[len++]=ch;
        ch=getchar();
    }

    if(len==256)
    {
        printf("command is too long\n");
        exit(-1);
    }

    buf[len]='\n';
    len++;
    buf[len]='\0';
}

void explain_input(char *buf,int *argcount,char arglist[100][256])
{
    char *p=buf;
    char *q=buf;
    int number=0;

    while(1)
    {
        if(p[0]=='\n')
            break;
        if(p[0]==' ')
            p++;
        else{
            q=p;
            number=0;
            while((q[0]!=' ')&&(q[0]!='\n')){
                number++;
                q++;
            }
            strncpy(arglist[*argcount],p,number+1);
            arglist[*argcount][number]='\0';
            *argcount=*argcount+1;
            p=q;
        }
    }

   // for(int i=0;i<*argcount;i++)
    //{
      //  printf("%s",arglist[i]);
        //printf("\n");
    //}
}

void do_cmd(int argcount,char arglist[100][256])
{
    int flag=0;
    int how=0;
    int background=0;
    int status;
    int i;
    int fd;
    char *arg[argcount+1];
    char *argnext[argcount+1];
    char *file;
    pid_t pid;

    for(i=0;i<argcount;i++)
    {
        arg[i]=(char *)arglist[i];
    }
    arg[argcount]=NULL;

    for(i=0;i<argcount;i++)
    {
        if(strncmp(arg[i],"&",1)==0)
        {
            if(i==argcount-1)
            {
                background=1;
                arg[argcount-1]=NULL;
                break;
            }else{
                printf("wrong command\n");
                return;
            }
        }
    }

    for(i=0;arg[i]!=NULL;i++)
    {
        if(strcmp(arg[i],">")==0)
        {
            flag++;
            how=out_redirect;
            if(arg[i+1]==NULL)
                flag++;
        }else if(strncmp(arg[i],">>",2)==0)
        {
            flag++;
            how=aout_redirect;
            if(arg[i+1]==NULL)
                flag++;
        }

        if(strcmp(arg[i],"<")==0)
        {
            flag++;
            how=in_redirect;
            if(i==0)
                flag++;
        }

        if(strcmp(arg[i],"|")==0)
        {
            flag++;
            how=have_pipe;
            if(arg[i+1]==NULL)
                flag++;
            if(i==0)
                flag++;
        }
    }

    if(flag>1)
    {
        printf("wrong command\n");
        return;
    }

    if(how==out_redirect)
    {
        for(i=0;arg[i]!=NULL;i++)
        {
            if(strcmp(arg[i],">")==0)
            {
                file=arg[i+1];
                arg[i]=NULL;
            }
        }
    }

     if(how==aout_redirect)
    {
        for(i=0;arg[i]!=NULL;i++)
        {
            if(strcmp(arg[i],">>")==0)
            {
                file=arg[i+1];
                arg[i]=NULL;
            }
        }
    }

    if(how==in_redirect)
    {
        for(i=0;arg[i]!=NULL;i++)
        {
            if(strcmp(arg[i],"<")==0)
            {
                file=arg[i+1];
                arg[i]=NULL;
            }
        }
    }

    if(how==have_pipe)
    {
        for(i=0;arg[i]!=NULL;i++)
        {
            if(strcmp(arg[i],"|")==0)
            {
                arg[i]=NULL;
                int j;
                for(j=i+1;arg[j]!=NULL;j++)
                {
                    argnext[j-i-1]=arg[j];
                }
                 argnext[j-i-1]=arg[j];
                 break;
            }
        }
    }

    if((pid=fork())<0)
    {
        printf("fork error\n");
        return;
    }

    switch(how)
    {
        case 0:
            if(pid==0)
            {
                if(!(find_command(arg[0])))
                {
                    printf("%s : command not found\n",arg[0]);
                    exit(0);
                }
                execvp(arg[0],arg);
                exit(0);
            }
            break;
        case 1:
            if(pid==0)
            {
                if(!(find_command(arg[0])))
                    {
                        printf("%s : command not found\n",arg[0]);
                        exit(0);
                    }
                    fd=open(file,O_RDWR|O_CREAT|O_TRUNC,0644);
                    dup2(fd,1);
                    execvp(arg[0],arg);
                    exit(0);
                } 
            break;
        case 2:
            if(pid==0)
            {
                int pid2;
                int status2;
                int fd2;

                if((pid2=fork())<0)
                {
                    printf("fork2 error\n");
                    return;
                }else if (pid2==0)
                {
                    if(!(find_command(arg[0])))
                    {
                         printf("%s : command not found\n",arg[0]);
                        exit(0);
                    }
                    fd2=open("/tmp/youdonotknowfile",O_WRONLY|O_CREAT|O_TRUNC,0644);
                    dup2(fd2,1);
                    execvp(arg[0],arg);
                    exit(0);
                }
                if(waitpid(pid2,&status2,0)==-1)
                {
                    printf("wait for child process error\n");
                }
                if(!(find_command(argnext[0])))
                {
                     printf("%s : command not found\n",arg[0]);
                        exit(0);
                }
                fd2=open("/tmp/youdonotknowfile",O_RDONLY);
                dup2(fd2,0);
                execvp(argnext[0],argnext);

                if(remove("/tmp/youdonotknowfile"))
                {
                     printf("%s : command not found\n",arg[0]);
                        exit(0);
                }
            }
            break;
        case 4:// >>
            if(pid==0)
            {
                if(!(find_command(arg[0])))
                    {
                        printf("%s : command not found\n",arg[0]);
                        exit(0);
                    }
                    fd=open(file,O_RDWR|O_CREAT|O_APPEND,0644);
                    dup2(fd,1);
                    execvp(arg[0],arg);
                    exit(0);
                } 
            break;
        default:
            break;
    }

    if(background==1)
    {
        printf("[process id %d]\n",pid);
        return;
    }

    if(waitpid(pid,&status,0)==-1)
    {
        printf("wait for child process error\n");
    }
}

int find_command(char *command)
{
    DIR *dp;
    struct dirent *dirp;
    char *path[]={"./","/bin","/usr/bin",NULL};

    if(strncmp(command,"./",2)==0)
        command=command +2;

    int i=0;
    while(path[i]!=NULL)
    {
        if((dp=opendir(path[i]))==NULL)
        {
            printf("can not open /bin \n");
        }
        while((dirp=readdir(dp))!=NULL)
        {
            if(strcmp(dirp->d_name,command)==0)
            {
                closedir(dp);
                return 1;
            }
        }
        closedir(dp);
        i++;
    } 
    return 0;
}#include<stdio.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<fcntl.h>
#include<unistd.h>
#include<errno.h>
#include <stdlib.h>
#include <string.h>

void my_err(const char *err_string,int line)
{
    fprintf(stderr,"line:%d ",line);
    perror(err_string);
    exit(1);
}

int my_read(int fd)
{
    int len;
    int ret;
    int i;
    char read_buf[64];
    if(lseek(fd,0,SEEK_END)==-1)
        my_err("lseek",__LINE__);
    if((len=lseek(fd,0,SEEK_CUR)==-1))
        my_err("lseek",__LINE__);
    if((lseek(fd,0,SEEK_SET))==-1)
        my_err("lseek",__LINE__);
    
    printf("len:%d\n",len);
    if((ret=read(fd,read_buf,len))<0)
        my_err("read",__LINE__);
        
    for(i=0;i<len;i++)
    {
        printf("%c",read_buf[i]);
    }
    printf("\n");
    return ret;
}
int main()
{
    int fd;
    char write_buf[32]="hello world!";
    if((fd=creat("example_63.c",S_IRWXU))==-1)
    {
        if((fd=open("example_63.c",O_RDWR|O_CREAT|O_TRUNC,S_IRWXU))==-1)
            my_err("open",__LINE__);
        else
            printf("create file succes!\n"); 
    }
    if((write(fd,write_buf,strlen(write_buf))!=strlen(write_buf)))
        my_err("write",__LINE__);
    my_read(fd);

    printf("/*____________________*/\n");
    if(lseek(fd,10,SEEK_END)==-1)
    my_err("lseek",__LINE__);
    if(write(fd,write_buf,strlen(write_buf))!=strlen(write_buf))
        my_err("write",__LINE__);
    my_read(fd);
    close(fd);
    return 0;
}